<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac自动SSH+MFA</title>
    <url>/2022/12/08/Mac%E8%87%AA%E5%8A%A8SSH-MFA/</url>
    <content><![CDATA[<p>因工作需要，使用Iterm2自动跳转远程终端，提高工作效率</p>
<h1 id="自动获取MFA-Token"><a href="#自动获取MFA-Token" class="headerlink" title="自动获取MFA Token"></a>自动获取MFA Token</h1><p>安装oath-toolkit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew search oath-toolkit</span><br><span class="line">brew install oath-toolkit</span><br></pre></td></tr></table></figure>

<p>使用下面命令获取token， 注：${SECKEY} 是一个变量，按照自己的填写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> smCode=<span class="string">&quot;echo `oathtool --totp -b <span class="variable">$&#123;SECKEY&#125;</span> `| pbcopy&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="自定义SHELL-MFA-TOKEN脚本"><a href="#自定义SHELL-MFA-TOKEN脚本" class="headerlink" title="自定义SHELL+MFA TOKEN脚本"></a>自定义SHELL+MFA TOKEN脚本</h1><p>将脚本保存juneyao_auto_ssh_prd.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">opts=$@</span><br><span class="line">getParam()&#123;</span><br><span class="line">  arg=$1</span><br><span class="line">  echo $opts | xargs -n1 | cut -b 2- | awk -F&#x27;=&#x27; &#x27;&#123;if($1==&quot;&#x27;&quot;$arg&quot;&#x27;&quot;) print $2&#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USER=zhaoyihao</span><br><span class="line">echo &quot;[INFO] USER: &quot;$&#123;USER&#125;</span><br><span class="line"></span><br><span class="line">HOST=`getParam HOST`</span><br><span class="line">echo &quot;[INFO] HOST: &quot;$&#123;HOST&#125;</span><br><span class="line"></span><br><span class="line">PASSWORD=`getParam PASSWORD`</span><br><span class="line">echo &quot;[INFO] PASSWORD: *****&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stg:20 prd:2222</span></span><br><span class="line">PORT=`getParam PORT`</span><br><span class="line">echo &quot;[INFO] PORT: &quot;$&#123;PORT&#125;</span><br><span class="line"></span><br><span class="line">PRD_TOKEN=&quot;`oathtool --totp -b 4YIKKGPXJD3G32YP`&quot;</span><br><span class="line"></span><br><span class="line">sw_login()&#123;</span><br><span class="line">        expect -c &quot;</span><br><span class="line">        # 每个判断等待1秒</span><br><span class="line">        set timeout 1</span><br><span class="line">        spawn ssh $USER@$HOST -p $PORT</span><br><span class="line">        # 判断是否需要保存秘钥</span><br><span class="line">        expect &#123;</span><br><span class="line">                \&quot;yes/no\&quot;   &#123; send yes\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 判断发送密码</span><br><span class="line">        expect &#123;        </span><br><span class="line">        				\&quot;*assword\&quot; &#123; send $PASSWORD\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 判断发送验证码</span><br><span class="line">        expect &#123;        </span><br><span class="line">        				\&quot;*OTP Code*\&quot; &#123; send $PRD_TOKEN\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 停留在当前登录界面</span><br><span class="line">        interact</span><br><span class="line">        &quot;</span><br><span class="line">&#125;</span><br><span class="line">sw_login</span><br></pre></td></tr></table></figure>



<p>脚本的使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh juneyao_auto_ssh_prd.sh -HOST=jmp.juneyaoair.com -PORT=2222 -PASSWORD=123123</span><br></pre></td></tr></table></figure>



<h1 id="与ITerm2集成"><a href="#与ITerm2集成" class="headerlink" title="与ITerm2集成"></a>与ITerm2集成</h1><p>在ITerm2终端中进行配置</p>
<p>Preference… -&gt; Profiles -&gt; +</p>
<p>将脚本运行命令填入到Send text at start:文本框中保存即可。</p>
]]></content>
  </entry>
  <entry>
    <title>github配置多用户</title>
    <url>/2022/12/08/github%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<p>因为需要使用多个github账号，但只有一台电脑，想要动态切换不同用户，并且做到免密提交。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Mac book Pro 2020</li>
<li>git version 2.24.3 (Apple Git-128)</li>
<li>github账号</li>
</ul>
<table>
<thead>
<tr>
<th>github登录账号</th>
<th>github用户名</th>
</tr>
</thead>
<tbody><tr>
<td><a href="mailto:&#x63;&#x6e;&#x6e;&#x71;&#x6a;&#98;&#97;&#110;&#53;&#50;&#49;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x63;&#x6e;&#x6e;&#x71;&#x6a;&#98;&#97;&#110;&#53;&#50;&#49;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a></td>
<td>hoey94</td>
</tr>
<tr>
<td><a href="mailto:&#x33;&#53;&#49;&#56;&#x36;&#x35;&#x35;&#x37;&#54;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#x33;&#53;&#49;&#56;&#x36;&#x35;&#x35;&#x37;&#54;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a></td>
<td>hoey1994</td>
</tr>
</tbody></table>
<ul>
<li>测试用的项目(大小写区分)</li>
</ul>
<table>
<thead>
<tr>
<th>Github账号</th>
<th>项目</th>
</tr>
</thead>
<tbody><tr>
<td><a href="mailto:&#99;&#x6e;&#110;&#113;&#106;&#98;&#97;&#x6e;&#53;&#50;&#x31;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#99;&#x6e;&#110;&#113;&#106;&#98;&#97;&#x6e;&#53;&#50;&#x31;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></td>
<td>Test</td>
</tr>
<tr>
<td><a href="mailto:&#51;&#x35;&#49;&#56;&#54;&#x35;&#x35;&#x37;&#54;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#109;">&#51;&#x35;&#49;&#56;&#54;&#x35;&#x35;&#x37;&#54;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#109;</a></td>
<td>test</td>
</tr>
</tbody></table>
<h1 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h1><p>为两个账号生成不同的公钥(*.pub)和密钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;cnnqjban521@gmail.com&quot; -f ~/.ssh/id_rsa_hoey94</span><br><span class="line">ssh-keygen -t rsa -C &quot;351865576@qq.com&quot; -f ~/.ssh/id_rsa_hoey1994</span><br></pre></td></tr></table></figure>

<p>生成的两组，公钥和密钥，分别到github官网上配置免密登录 Settings-&gt;SSH and GPG Keys-&gt;New SSH Key，填写的内容可以是用下面命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa_hoey94.pub</span><br><span class="line">cat ~/.ssh/id_rsa_hoey1994.pub</span><br></pre></td></tr></table></figure>



<h1 id="配置映射"><a href="#配置映射" class="headerlink" title="配置映射"></a>配置映射</h1><p>创建~/.ssh/config，将内容填入进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host github-hoey1994</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_hoey1994</span><br></pre></td></tr></table></figure>



<p>这里解释一下这一组内容的含义，平常克隆的时候我们会这么写:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:hoey1994/test.git</span><br></pre></td></tr></table></figure>

<p>但如果如果按照上面内容进行配置以后，在克隆的时候要改成这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github-hoey1994:hoey1994/test.git</span><br></pre></td></tr></table></figure>

<p>请仔细对比一下上面两个克隆命令之间的差异</p>
<p>按照同样原理，将另一个账号也配置一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host github-hoey94</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_hoey94</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果端口有修改，可以按照下面的方式进行填写</p>
<p>Host gitlib-juneyao<br>HostName gitlab.juneyaoair.com<br>Port 10022<br>IdentityFile /Users/hoey/.ssh/id_rsa_juneyao</p>
</blockquote>
<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>推荐不要跳过这一步，gacm是管理git用户很不错的一个工具，可以稍微熟悉一下命令。对于commit 的author的信息，可以快速的进行切换，因为本地有多个用户，使用它可以大大提高效率。</p>
<ol>
<li>取消全局的用户配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset user.email</span><br><span class="line">git config --global --unset user.mail</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看内容是否已经取消</span></span><br><span class="line">git config --global -e</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>安装多用户管理工具<a href="https://github.com/hoey94/gacm">gacm</a>，具体安装步骤见github</p>
</li>
<li><p>使用gacm命令添加两个账户</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gacm add --name hoey94 --email cnnqjban521@gmail.com</span><br><span class="line">gacm add --name hoey1994 --email 351865576@qq.com</span><br></pre></td></tr></table></figure>



<h1 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h1><p>在账号<a href="mailto:&#99;&#x6e;&#x6e;&#113;&#106;&#98;&#97;&#110;&#x35;&#x32;&#49;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#99;&#x6e;&#x6e;&#113;&#106;&#98;&#97;&#110;&#x35;&#x32;&#49;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>(hoey94)下创建Test项目</p>
<p>在账号<a href="mailto:&#51;&#53;&#49;&#56;&#x36;&#53;&#x35;&#x37;&#54;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;">&#51;&#53;&#49;&#56;&#x36;&#53;&#x35;&#x37;&#54;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;</a>(hoey1994)下创建test项目</p>
<p>使用下面命令分别克隆到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆Test</span></span><br><span class="line">git clone git@github-hoey94:hoey94/Test.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用gacm切换项目本地用户为hoey94</span></span><br><span class="line">gacm use hoey94 --local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看项目本地用户是否切换成功</span></span><br><span class="line">gacm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆<span class="built_in">test</span></span></span><br><span class="line">git clone git@github-hoey1994:hoey1994/test.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用gacm切换项目本地用户为hoey1994</span></span><br><span class="line">gacm use hoey1994 --local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看项目本地用户是否切换成功</span></span><br><span class="line">gacm ls</span><br></pre></td></tr></table></figure>



<p>改动一下里面的内容并提交完成测试。</p>
]]></content>
  </entry>
  <entry>
    <title>hexo换主题乱码问题的解决</title>
    <url>/2022/12/08/hexo%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="hexo换主题乱码问题的解决"><a href="#hexo换主题乱码问题的解决" class="headerlink" title="hexo换主题乱码问题的解决"></a>hexo换主题乱码问题的解决</h1><p>使用next主题</p>
<h2 id="问题的表现"><a href="#问题的表现" class="headerlink" title="问题的表现"></a>问题的表现</h2><p><code>&#123;% extends '_layout.swig' %&#125; &#123;% import '_macro/post.swig' as post_template %&#125;....................</code></p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<p>之后重新</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean          </span><br><span class="line">hexo <span class="keyword">generate</span>      </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
