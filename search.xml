<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DolphinScheduler 3.1.0 本地环境搭建</title>
    <url>/posts/20221228222917-aa59cf36.html</url>
    <content><![CDATA[<p>环境准备</p>
<ul>
<li>MacBook Pro (13-inch, 2020, Four Thunderbolt 3 ports)</li>
<li><a href="https://git-scm.com/downloads">Git</a></li>
<li><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK</a>: v1.8.x (Currently does not support jdk 11)</li>
<li><a href="http://maven.apache.org/download.cgi">Maven</a>: v3.5+</li>
<li><a href="https://nodejs.org/en/download">Node</a>: v16.13+ (dolphinScheduler version is lower than 3.0, please install node v12.20+)</li>
<li><a href="https://pnpm.io/installation">Pnpm</a>: v6.x</li>
<li>Zookeeper: 3.8</li>
</ul>
<p>1.克隆项目到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/dolphinscheduler.git</span><br></pre></td></tr></table></figure>

<p>2.导入项目到IDEA，并切换分支到<code>3.1.0</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 3.1.0-release</span><br></pre></td></tr></table></figure>

<p>3.编译项目</p>
<p>spotless是一种代码格式化工具，使用 spotless:apply 表示格式化module代码</p>
<p>mvnw同mvn的功能是一样的，mvnw做了项目适配</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mvnw spotless:apply </span><br><span class="line">./mvnw clean install -Prelease -Dmaven.test.skip=true -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true</span><br></pre></td></tr></table></figure>

<p>4.在mysql创建database数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA dolphinschedulertest;</span><br></pre></td></tr></table></figure>

<p>找到脚本dolphinscheduler-dao/src/main/resources/sql/dolphinscheduler_mysql.sql并运行</p>
<p>5.修改项目配置文件</p>
<p>全局搜索<code>application.yaml</code>，将文件中涉及postgresql的替换为mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   driver-class-name: org.postgresql.Driver</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   url: jdbc:postgresql://127.0.0.1:5432/dolphinscheduler</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   username: root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   password: root</span></span><br><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">url: jdbc:mysql://127.0.0.1:3306/dolphinschedulertest</span><br><span class="line">username: root</span><br><span class="line">password: 123456</span><br><span class="line"></span><br><span class="line">org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br></pre></td></tr></table></figure>

<p>6.修改dolphinscheduler-bom下pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7.修改logback-spring.xml</p>
<p>全局搜索logback-spring.xml，将下面内容添加到其中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--将这句话加入到root节点下--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>8.配置启动项</p>
<p>分别配置MasterServer, WorkerServer, ApiApplicationServer</p>
<ul>
<li>MasterServer：Execute function <code>main</code> in the class <code>org.apache.dolphinscheduler.server.master.MasterServer</code> by Intellij IDEA, with the configuration <em>VM Options</em> <code>-Dlogging.config=classpath:logback-spring.xml -Ddruid.mysql.usePingMethod=false -Dspring.profiles.active=mysql</code></li>
<li>WorkerServer：Execute function <code>main</code> in the class <code>org.apache.dolphinscheduler.server.worker.WorkerServer</code> by Intellij IDEA, with the configuration <em>VM Options</em> <code>-Dlogging.config=classpath:logback-spring.xml -Ddruid.mysql.usePingMethod=false -Dspring.profiles.active=mysql</code></li>
<li>ApiApplicationServer：Execute function <code>main</code> in the class <code>org.apache.dolphinscheduler.api.ApiApplicationServer</code> by Intellij IDEA, with the configuration <em>VM Options</em> <code>-Dlogging.config=classpath:logback-spring.xml -Dspring.profiles.active=api,mysql</code>. After it started, you could find Open API documentation in <a href="http://localhost:12345/dolphinscheduler/swagger-ui/index.html">http://localhost:12345/dolphinscheduler/swagger-ui/index.html</a></li>
</ul>
<p>9.配置zookeeper</p>
<p>参考以前的博客<a href="https://blog.hoey.tk/2018/04/15/2018-04-15-hadoop-zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8/">zookeeper部署</a></p>
<p>10.启动前端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pnpm install</span><br><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure>

<p>11.启动后端</p>
<p>分别在IDEA中运行MasterServer, WorkerServer, ApiApplicationServer</p>
<p>登陆账号密码 <font color="red">admin/dolphinscheduler123</font></p>
<p>参考文档：<a href="https://www.bookstack.cn/read/dolphinscheduler-3.1.0-en/af18cd17a04eb31f.md">https://www.bookstack.cn/read/dolphinscheduler-3.1.0-en/af18cd17a04eb31f.md</a></p>
<p>编译错误1：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal com.github.eirslett:frontend-maven-plugin:1.12.1:pnpm (pnpm install) on project dolphinscheduler-ui: Failed to run task: &#x27;pnpm install&#x27; failed. org.apache.commons.exec.ExecuteException: Process exited with an error: 9 (Exit value: 9) -&gt; [Help 1]</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<p>修改dolphinscheduler-ui模块下的pom.xml，修改后记得重新执行<code>./mvnw spotless:apply</code>格式化代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--                &lt;plugins&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;plugin&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;version&gt;$&#123;frontend-maven-plugin.version&#125;&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                            &lt;pnpmInheritsProxyConfigFromMaven&gt;false&lt;/pnpmInheritsProxyConfigFromMaven&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;/configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;executions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                            &lt;execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;id&gt;install node and pnpm&lt;/id&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                    &lt;goal&gt;install-node-and-pnpm&lt;/goal&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;/goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                    &lt;nodeVersion&gt;$&#123;node.version&#125;&lt;/nodeVersion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                    &lt;pnpmVersion&gt;$&#123;pnpm.version&#125;&lt;/pnpmVersion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;/configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                            &lt;/execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                            &lt;execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;id&gt;pnpm install&lt;/id&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                    &lt;goal&gt;pnpm&lt;/goal&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;/goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;phase&gt;generate-resources&lt;/phase&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                    &lt;arguments&gt;install&lt;/arguments&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;/configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                            &lt;/execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                            &lt;execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;id&gt;pnpm run build:prod&lt;/id&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                    &lt;goal&gt;pnpm&lt;/goal&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;/goals&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                    &lt;arguments&gt;run build:prod&lt;/arguments&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                &lt;/configuration&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                            &lt;/execution&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        &lt;/executions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;/plugin&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/plugins&gt;--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Doris使用踩坑总结</title>
    <url>/posts/20230328125112-f144fb4b.html</url>
    <content><![CDATA[<p>环境</p>
<ul>
<li>MacBook Pro (13-inch, 2020, Four Thunderbolt 3 ports)</li>
<li>[Doris](<a href="https://doris.apache.org/zh-CN/docs/dev/install/construct-docker/run-docker-cluster/">部署 Docker 集群 - Apache Doris</a>):v1.12.1</li>
<li><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK</a>: v1.8.x</li>
<li>IDEA开发环境</li>
</ul>
<h3 id="一、-Docker部署"><a href="#一、-Docker部署" class="headerlink" title="一、 Docker部署"></a>一、 Docker部署</h3><p>官方提供文档<a href="https://doris.apache.org/zh-CN/docs/dev/install/construct-docker/run-docker-cluster/">Deploy Docker cluster</a></p>
<p><font color="red">但部署完以后发现集群无法识别BE节点，查看日志发现是因为没有设置<code>vm.max_map_count</code>参数</font></p>
<blockquote>
<p>避坑1: 需要设置sysctl -w vm.max_map_count=2000000</p>
<p>避坑2: 在启动容器时需要添加privileged: true</p>
</blockquote>
<h3 id="二、Flink-写入Doris"><a href="#二、Flink-写入Doris" class="headerlink" title="二、Flink 写入Doris"></a>二、Flink 写入Doris</h3><p>官方提供了文档<a href="https://doris.apache.org/zh-CN/docs/dev/ecosystem/flink-doris-connector?_highlight=flink">Flink Doris Connector</a></p>
<p>这里选用的是RowData的方式写入到Doris，提前到Doris中创建表代码如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE dwd;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> dwd.TICKET;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> dwd.TICKET (</span><br><span class="line">        event <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">        newval <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">        oldval <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">        stamp <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">        subevent <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">        uptm <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">        uptmms <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">        ver <span class="type">VARCHAR</span>(<span class="number">256</span>)</span><br><span class="line">)DISTRIBUTED <span class="keyword">BY</span> HASH(stamp) BUCKETS <span class="number">1</span></span><br><span class="line">PROPERTIES (</span><br><span class="line">&quot;replication_allocation&quot; <span class="operator">=</span> &quot;tag.location.default: 1&quot;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>然后是使用Java代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;format&quot;</span>, <span class="string">&quot;json&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;strip_outer_array&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.fromElements(<span class="string">&quot;&#123;\&quot;event\&quot;:\&quot;CheckIn\&quot;,\&quot;newval\&quot;:\&quot;90\&quot;,\&quot;oldval\&quot;:\&quot;0\&quot;,\&quot;stamp\&quot;:\&quot;67100c4f-0355-4dba-8a76-2a94202132d1\&quot;,\&quot;subevent\&quot;:\&quot;\&quot;,\&quot;uptm\&quot;:\&quot;20230319094822\&quot;,\&quot;uptmms\&quot;:\&quot;20230319094822031\&quot;,\&quot;ver\&quot;:\&quot;v1.0\&quot;&#125;&quot;</span>)</span><br><span class="line">                .addSink(DorisSink.sink(</span><br><span class="line">                        DorisReadOptions.builder().build(),</span><br><span class="line">                        DorisExecutionOptions.builder().setBatchSize(<span class="number">3</span>)</span><br><span class="line">                                .setBatchIntervalMs(<span class="number">0L</span>)</span><br><span class="line">                                .setMaxRetries(<span class="number">3</span>)</span><br><span class="line">                                .setStreamLoadProp(prop)</span><br><span class="line">                                .build(),</span><br><span class="line">                        DorisOptions.builder().setFenodes(<span class="string">&quot;localhost:8030&quot;</span>)</span><br><span class="line">                                .setTableIdentifier(<span class="string">&quot;dwd.TICKET&quot;</span>)</span><br><span class="line">                                .setUsername(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                                .setPassword(<span class="string">&quot;&quot;</span>).build())</span><br><span class="line">                );</span><br><span class="line">        env.execute(<span class="string">&quot;pss-format-job&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red">运行时发现网络不通问题，无法成功写入Dois</font>，具体错误如图下图所示：</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230328131103501.png" alt="image-20230328131103501"></p>
<p>分析宿主节点和docker集群的关系</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230328131607049.png" alt="image-20230328131607049"></p>
<p>由架构图得知，是因为sink写入的时候通过外网地址的fe取到be地址是内网地址。</p>
<p>解决思路：</p>
<ol>
<li><p>程序上传到FE运行，但是我属于本地开发环境，这种方式不适合</p>
</li>
<li><p>配置Docker network，使得在宿主节点能够访问容器 BE的IP。这块我也尝试搜索了很多资料，最终以失败告终。</p>
<ul>
<li>尝试一： 在宿主节点修改路由表 sudo route add -net 172.20.80.0/24 172.20.80.1</li>
<li>尝试二： 以Host方式运行FE和BE</li>
</ul>
</li>
<li><p>修改源代码： 找到涉及到“第二步：将BE内网IP返回给主程序”代码，并修改</p>
</li>
</ol>
<p>其中我是用第三种方法，成功在本地开发环境摄入数据到Doris，在这里简单介绍一下快速修改源码的方法。</p>
<p>第一步： 先找到涉及到代码的相关方法，在该场景中对应的是<code>org.apache.doris.flink.rest.RestService</code>类的<code>randomBackend()</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">randomBackend</span><span class="params">(DorisOptions options, DorisReadOptions readOptions, Logger logger)</span> <span class="keyword">throws</span> DorisException, IOException &#123;</span><br><span class="line">        List&lt;BackendRowV2&gt; backends = getBackendsV2(options, readOptions, logger);</span><br><span class="line">        logger.trace(<span class="string">&quot;Parse beNodes &#x27;&#123;&#125;&#x27;.&quot;</span>, backends);</span><br><span class="line">        <span class="keyword">if</span> (backends != <span class="literal">null</span> &amp;&amp; !backends.isEmpty()) &#123;</span><br><span class="line">            Collections.shuffle(backends);</span><br><span class="line">            <span class="type">BackendRowV2</span> <span class="variable">backend</span> <span class="operator">=</span> (BackendRowV2)backends.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> backend.getIp() + <span class="string">&quot;:&quot;</span> + backend.getHttpPort();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;argument &#x27;&#123;&#125;&#x27; is illegal, value is &#x27;&#123;&#125;&#x27;.&quot;</span>, <span class="string">&quot;beNodes&quot;</span>, backends);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;beNodes&quot;</span>, String.valueOf(backends));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第二步：现在希望返回值并非BE的内网IP，因此我们需要将<code>return</code>的内容写死<code>return &quot;localhost:8040&quot;;</code></p>
<p>第三步：在代码中我们创建与类相同的包，并将源码原封不动粘贴进去，如果报错，可以修改。紧接着修改<code>return &quot;localhost:8040&quot;;</code>即可</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230328133408579.png" alt="image-20230328133408579"></p>
<p>总结：</p>
<p>我这里是本地开发环境遇到的问题，并非生产环境；如果生产环境部署基于Doris的应用程序，则需要注意下下面几点：</p>
<ol>
<li>运行的代码所在的机器，必须与Doris所在的网络保持通常。</li>
<li>基于RowData的摄入方式不太友好，现在仍要寻找一种更好的编码方式。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hexo隐藏文章</title>
    <url>/posts/20221212095216-1c5dc392.html</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在站点根目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点目录下的<code>_config.yml</code>中如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo-hide-posts</span></span><br><span class="line">hide_posts:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">可以改成其他你喜欢的名字</span></span><br><span class="line">  filter: hidden</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">留空则默认全部隐藏</span></span><br><span class="line">  public_generators: []</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  noindex: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在文章的属性中定义 <code>hidden: true</code> 即可隐藏文章。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hidden test</span><br><span class="line">date: 2022-12-12 09:49:19</span><br><span class="line">hidden: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>虽然首页上被隐藏了，但你仍然可以通过 <code>https://hexo.test/lorem-ipsum/</code> 链接访问它。</p>
<p>你可以在命令行运行 <code>hexo hidden:list</code> 来获取当前所有的已隐藏文章列表。</p>
<p>参考blog：<a href="https://www.cnblogs.com/yangstar/articles/16690342.html">https://www.cnblogs.com/yangstar/articles/16690342.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Mac下VIM配置</title>
    <url>/posts/20221208222030-7a63f10c.html</url>
    <content><![CDATA[<h1 id="安装gruvbox主题"><a href="#安装gruvbox主题" class="headerlink" title="安装gruvbox主题"></a>安装gruvbox主题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.vim/colors ; cd ~/.vim/colors</span><br><span class="line">curl -O https://raw.githubusercontent.com/morhetz/gruvbox/blob/master/colors/gruvbox.vim</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim ~/.vimrc</span><br><span class="line">&quot;********************************gruvbox主题******************************&quot;</span><br><span class="line">call plug#begin()</span><br><span class="line">Plug &#x27;morhetz/gruvbox&#x27;</span><br><span class="line">call plug#end()</span><br><span class="line">colorscheme gruvbox</span><br><span class="line">set background=dark</span><br></pre></td></tr></table></figure>

<p>执行完成以后，重新运行vim查看效果。</p>
<h1 id="vimrc其他设置"><a href="#vimrc其他设置" class="headerlink" title="vimrc其他设置"></a>vimrc其他设置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&quot;********************************基本设置******************************&quot;</span><br><span class="line">set tabstop=4                &quot; 设置tab键的宽度</span><br><span class="line">set shiftwidth=4             &quot; 换行时行间交错使用4个空格</span><br><span class="line">set autoindent               &quot; 自动对齐</span><br><span class="line">set backspace=2              &quot; 设置退格键可用</span><br><span class="line">set shiftwidth=4     		 &quot; 自动缩进4空格</span><br><span class="line">set smartindent              &quot; 智能自动缩进</span><br><span class="line">set number                   &quot; 在每一行最前面显示行号</span><br><span class="line">set showmatch                &quot; 高亮显示对应的括号</span><br><span class="line">set mouse=a                  &quot; 启用鼠标</span><br><span class="line">set ruler                    &quot; 在编辑过程中，在右下角显示光标位置的状态行</span><br><span class="line">set cursorline               &quot; 突出显示当前行</span><br><span class="line">set noswapfile               &quot; 设置无交换区文件&quot;</span><br><span class="line">set writebackup              &quot; 设置无备份文件</span><br><span class="line">set nobackup                 &quot; 设置无备份文件</span><br><span class="line">set autochdir                &quot; 设定文件浏览器目录为当前目录</span><br><span class="line">set foldmethod=syntax        &quot; 选择代码折叠类型</span><br><span class="line">set laststatus=2             &quot; 开启状态栏信息</span><br><span class="line">set cmdheight=2              &quot; 命令行的高度，默认为1，这里设为2</span><br><span class="line">set autoread                 &quot; 当文件在外部被修改，自动更新该文件</span><br><span class="line">set autoread                 &quot; 自动检测并加载外部对文件的修改</span><br><span class="line">set autowrite                &quot; 自动检测并加载外部对文件的修改</span><br><span class="line">set showcmd                  &quot; 在状态行显示目前所执行的命令，未完成的指令片段亦会显示出来</span><br><span class="line">syntax enable                &quot; 打开语法高亮</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if has(&quot;gui_running&quot;)</span><br><span class="line">    set guioptions+=b        &quot; 显示底部滚动条</span><br><span class="line">    set nowrap               &quot; 设置不自动换行</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot;********************************设置编码*******************************&quot;</span><br><span class="line">&quot; 设置换行编码</span><br><span class="line">set fileformats=unix,dos,mac</span><br><span class="line">&quot; 设置Vim 内部使用的字符编码方式</span><br><span class="line">set encoding=utf-8</span><br><span class="line">&quot; 设置文件编码</span><br><span class="line">if has(&quot;win32&quot;)</span><br><span class="line">	set fileencoding=chinese</span><br><span class="line">else</span><br><span class="line">	set fileencoding=utf-8</span><br><span class="line">endif</span><br><span class="line">&quot; 解决consle输出乱码</span><br><span class="line">language messages zh_CN.utf-8</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Mac自动SSH+MFA</title>
    <url>/posts/20221208193934-30d40687.html</url>
    <content><![CDATA[<p>因工作需要，使用Iterm2自动跳转远程终端，提高工作效率</p>
<h1 id="自动获取MFA-Token"><a href="#自动获取MFA-Token" class="headerlink" title="自动获取MFA Token"></a>自动获取MFA Token</h1><p>安装oath-toolkit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew search oath-toolkit</span><br><span class="line">brew install oath-toolkit</span><br></pre></td></tr></table></figure>

<p>使用下面命令获取token， 注：${SECKEY} 是一个变量，按照自己的填写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> smCode=<span class="string">&quot;echo `oathtool --totp -b <span class="variable">$&#123;SECKEY&#125;</span> `| pbcopy&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="自定义SHELL-MFA-TOKEN脚本"><a href="#自定义SHELL-MFA-TOKEN脚本" class="headerlink" title="自定义SHELL+MFA TOKEN脚本"></a>自定义SHELL+MFA TOKEN脚本</h1><p>将脚本保存juneyao_auto_ssh_prd.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">opts=$@</span><br><span class="line">getParam()&#123;</span><br><span class="line">  arg=$1</span><br><span class="line">  echo $opts | xargs -n1 | cut -b 2- | awk -F&#x27;=&#x27; &#x27;&#123;if($1==&quot;&#x27;&quot;$arg&quot;&#x27;&quot;) print $2&#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USER=zhaoyihao</span><br><span class="line">echo &quot;[INFO] USER: &quot;$&#123;USER&#125;</span><br><span class="line"></span><br><span class="line">HOST=`getParam HOST`</span><br><span class="line">echo &quot;[INFO] HOST: &quot;$&#123;HOST&#125;</span><br><span class="line"></span><br><span class="line">PASSWORD=`getParam PASSWORD`</span><br><span class="line">echo &quot;[INFO] PASSWORD: *****&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stg:20 prd:2222</span></span><br><span class="line">PORT=`getParam PORT`</span><br><span class="line">echo &quot;[INFO] PORT: &quot;$&#123;PORT&#125;</span><br><span class="line"></span><br><span class="line">PRD_TOKEN=&quot;`oathtool --totp -b 4YIKKGPXJD3G32YP`&quot;</span><br><span class="line"></span><br><span class="line">sw_login()&#123;</span><br><span class="line">        expect -c &quot;</span><br><span class="line">        # 每个判断等待1秒</span><br><span class="line">        set timeout 1</span><br><span class="line">        spawn ssh $USER@$HOST -p $PORT</span><br><span class="line">        # 判断是否需要保存秘钥</span><br><span class="line">        expect &#123;</span><br><span class="line">                \&quot;yes/no\&quot;   &#123; send yes\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 判断发送密码</span><br><span class="line">        expect &#123;        </span><br><span class="line">        				\&quot;*assword\&quot; &#123; send $PASSWORD\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 判断发送验证码</span><br><span class="line">        expect &#123;        </span><br><span class="line">        				\&quot;*OTP Code*\&quot; &#123; send $PRD_TOKEN\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 停留在当前登录界面</span><br><span class="line">        interact</span><br><span class="line">        &quot;</span><br><span class="line">&#125;</span><br><span class="line">sw_login</span><br></pre></td></tr></table></figure>



<p>脚本的使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh juneyao_auto_ssh_prd.sh -HOST=jmp.juneyaoair.com -PORT=2222 -PASSWORD=123123</span><br></pre></td></tr></table></figure>



<h1 id="与ITerm2集成"><a href="#与ITerm2集成" class="headerlink" title="与ITerm2集成"></a>与ITerm2集成</h1><p>在ITerm2终端中进行配置</p>
<p>Preference… -&gt; Profiles -&gt; +</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230105095419303.png" alt="image-20230105095419303"></p>
<p>将脚本运行命令填入到Send text at start:文本框中保存即可。</p>
]]></content>
  </entry>
  <entry>
    <title>github配置多用户</title>
    <url>/posts/20221208121846-ef5df40e.html</url>
    <content><![CDATA[<p>因为需要使用多个github账号，但只有一台电脑，想要动态切换不同用户，并且做到免密提交。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Mac book Pro 2020</li>
<li>git version 2.24.3 (Apple Git-128)</li>
<li>github账号</li>
</ul>
<table>
<thead>
<tr>
<th>github登录账号</th>
<th>github用户名</th>
</tr>
</thead>
<tbody><tr>
<td><a href="mailto:&#99;&#110;&#x6e;&#x71;&#106;&#x62;&#x61;&#110;&#53;&#x32;&#x31;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#99;&#110;&#x6e;&#x71;&#106;&#x62;&#x61;&#110;&#53;&#x32;&#x31;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></td>
<td>hoey94</td>
</tr>
<tr>
<td><a href="mailto:&#51;&#53;&#x31;&#56;&#x36;&#53;&#53;&#55;&#54;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;">&#51;&#53;&#x31;&#56;&#x36;&#53;&#53;&#55;&#54;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;</a></td>
<td>hoey1994</td>
</tr>
</tbody></table>
<ul>
<li>测试用的项目(大小写区分)</li>
</ul>
<table>
<thead>
<tr>
<th>Github账号</th>
<th>项目</th>
</tr>
</thead>
<tbody><tr>
<td><a href="mailto:&#x63;&#x6e;&#x6e;&#113;&#106;&#98;&#x61;&#110;&#53;&#50;&#x31;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x63;&#x6e;&#x6e;&#113;&#106;&#98;&#x61;&#110;&#53;&#50;&#x31;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></td>
<td>Test</td>
</tr>
<tr>
<td><a href="mailto:&#x33;&#53;&#49;&#x38;&#54;&#53;&#x35;&#55;&#54;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d;">&#x33;&#53;&#49;&#x38;&#54;&#53;&#x35;&#55;&#54;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d;</a></td>
<td>test</td>
</tr>
</tbody></table>
<h1 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h1><p>为两个账号生成不同的公钥(*.pub)和密钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;cnnqjban521@gmail.com&quot; -f ~/.ssh/id_rsa_hoey94</span><br><span class="line">ssh-keygen -t rsa -C &quot;351865576@qq.com&quot; -f ~/.ssh/id_rsa_hoey1994</span><br></pre></td></tr></table></figure>

<p>生成的两组，公钥和密钥，分别到github官网上配置免密登录 Settings-&gt;SSH and GPG Keys-&gt;New SSH Key，填写的内容可以是用下面命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa_hoey94.pub</span><br><span class="line">cat ~/.ssh/id_rsa_hoey1994.pub</span><br></pre></td></tr></table></figure>



<h1 id="配置映射"><a href="#配置映射" class="headerlink" title="配置映射"></a>配置映射</h1><p>创建~/.ssh/config，将内容填入进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host github-hoey1994</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_hoey1994</span><br></pre></td></tr></table></figure>



<p>这里解释一下这一组内容的含义，平常克隆的时候我们会这么写:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:hoey1994/test.git</span><br></pre></td></tr></table></figure>

<p>但如果如果按照上面内容进行配置以后，在克隆的时候要改成这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github-hoey1994:hoey1994/test.git</span><br></pre></td></tr></table></figure>

<p>请仔细对比一下上面两个克隆命令之间的差异</p>
<p>按照同样原理，将另一个账号也配置一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host github-hoey94</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_hoey94</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果端口有修改，可以按照下面的方式进行填写</p>
<p>Host gitlib-juneyao<br>HostName gitlab.juneyaoair.com<br>Port 10022<br>IdentityFile /Users/hoey/.ssh/id_rsa_juneyao</p>
</blockquote>
<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>推荐不要跳过这一步，gacm是管理git用户很不错的一个工具，可以稍微熟悉一下命令。对于commit 的author的信息，可以快速的进行切换，因为本地有多个用户，使用它可以大大提高效率。</p>
<ol>
<li>取消全局的用户配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset user.email</span><br><span class="line">git config --global --unset user.mail</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看内容是否已经取消</span></span><br><span class="line">git config --global -e</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>安装多用户管理工具<a href="https://github.com/hoey94/gacm">gacm</a>，具体安装步骤见github</p>
</li>
<li><p>使用gacm命令添加两个账户</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gacm add --name hoey94 --email cnnqjban521@gmail.com</span><br><span class="line">gacm add --name hoey1994 --email 351865576@qq.com</span><br></pre></td></tr></table></figure>



<h1 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h1><p>在账号<a href="mailto:&#99;&#110;&#x6e;&#x71;&#x6a;&#98;&#97;&#x6e;&#53;&#x32;&#x31;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#99;&#110;&#x6e;&#x71;&#x6a;&#98;&#97;&#x6e;&#53;&#x32;&#x31;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a>(hoey94)下创建Test项目</p>
<p>在账号<a href="mailto:&#51;&#x35;&#x31;&#56;&#54;&#53;&#x35;&#55;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#51;&#x35;&#x31;&#56;&#54;&#53;&#x35;&#55;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a>(hoey1994)下创建test项目</p>
<p>使用下面命令分别克隆到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆Test</span></span><br><span class="line">git clone git@github-hoey94:hoey94/Test.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用gacm切换项目本地用户为hoey94</span></span><br><span class="line">gacm use hoey94 --local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看项目本地用户是否切换成功</span></span><br><span class="line">gacm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆<span class="built_in">test</span></span></span><br><span class="line">git clone git@github-hoey1994:hoey1994/test.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用gacm切换项目本地用户为hoey1994</span></span><br><span class="line">gacm use hoey1994 --local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看项目本地用户是否切换成功</span></span><br><span class="line">gacm ls</span><br></pre></td></tr></table></figure>



<p>改动一下里面的内容并提交完成测试。</p>
]]></content>
  </entry>
  <entry>
    <title>hexo换主题乱码问题的解决</title>
    <url>/posts/20221208120419-a0fbf222.html</url>
    <content><![CDATA[<p>使用next主题时运行报错</p>
<h2 id="问题的表现"><a href="#问题的表现" class="headerlink" title="问题的表现"></a>问题的表现</h2><p><code>&#123;% extends '_layout.swig' %&#125; &#123;% import '_macro/post.swig' as post_template %&#125;....................</code></p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<p>之后重新</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean          </span><br><span class="line">hexo <span class="keyword">generate</span>      </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Jellyfin 添加字体库解决中文乱码</title>
    <url>/posts/20230430133503-ff462b52.html</url>
    <content><![CDATA[<p>最近使用Jellyfin搭建家庭影音出现中文乱码问题，下面是我搜到的一些方案，我用的是扩展中文字体库</p>
<ul>
<li>使用nyanmisaka/jellyfin 套件</li>
<li>使用actime转字幕</li>
<li>扩展中文字体库</li>
</ul>
<p>下面是一些指令，针对小白用的，大佬无视</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程登录到NAS并切换最高权限</span></span><br><span class="line">ssh admin@192.168.30.5 -p 22</span><br><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到NAS自己创建的目录，这个目录自己改</span></span><br><span class="line">cd /volume1/media/fonts</span><br><span class="line">pwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用docker命令查看jellyfin 的<span class="built_in">id</span></span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到容器内部查看目录文件结构1538f09eaa85要替换成自己的<span class="built_in">id</span></span></span><br><span class="line">docker exec -it 1538f09eaa85 /bin/bash</span><br><span class="line">cd /usr/share/fonts/</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制宿主机的文件到容器内</span></span><br><span class="line">docker cp fz.tar.gz 1538f09eaa85:/usr/share/fonts/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">到容器目录中解压</span></span><br><span class="line">docker exec -it 1538f09eaa85 /bin/bash</span><br><span class="line">cd /usr/share/fonts/</span><br><span class="line">tar -zxvf fz.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>链接：<a href="https://share.weiyun.com/5Wg55FF5">https://share.weiyun.com/5Wg55FF5</a> 密码：nhqe76</p>
<p>视频已经传到B站，欢迎观看<a href="https://www.bilibili.com/video/BV1jg4y1L7sR/?vd_source=8054953f896f7243d95be264ebdece29">Jellyfin中文字幕乱码解决_哔哩哔哩_bilibili</a></p>
]]></content>
  </entry>
  <entry>
    <title>ksqlDB</title>
    <url>/posts/20230314161612-f30a9b25.html</url>
    <content><![CDATA[<p>目前需要对Kafka Topic中的数据进行分析，查询了一下KSQLDB挺不错，它是一个流处理引擎，主要用于处理实时数据流，并支持 SQL 查询和流处理操作。KSQLDB 可以运行在 Apache Kafka 平台之上，它不需要额外的基础设施，因此可以方便地与 Kafka 进行集成。KSQLDB 可以实现流数据的可视化、数据的清洗和去重、流式计算等。KSQLDB 的主要特点包括易于使用、接近实时的处理速度、强大的 SQL 查询功能以及灵活的流处理操作。</p>
<p>环境准备</p>
<ul>
<li>MacBook Pro (13-inch, 2020, Four Thunderbolt 3 ports)</li>
<li>Docker &amp; Docker compose</li>
</ul>
<p>下面代码用于部署Standalone</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zookeeper:</span><br><span class="line">    image: confluentinc/cp-zookeeper:<span class="number">7.3</span>.<span class="number">0</span></span><br><span class="line">    hostname: zookeeper</span><br><span class="line">    container_name: zookeeper</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      ZOOKEEPER_CLIENT_PORT: <span class="number">2181</span></span><br><span class="line">      ZOOKEEPER_TICK_TIME: <span class="number">2000</span></span><br><span class="line"></span><br><span class="line">  broker:</span><br><span class="line">    image: confluentinc/cp-kafka:<span class="number">7.3</span>.<span class="number">0</span></span><br><span class="line">    hostname: broker</span><br><span class="line">    container_name: broker</span><br><span class="line">    depends_on:</span><br><span class="line">      - zookeeper</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;29092:29092&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_BROKER_ID: <span class="number">1</span></span><br><span class="line">      KAFKA_ZOOKEEPER_CONNECT: <span class="string">&#x27;zookeeper:2181&#x27;</span></span><br><span class="line">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span><br><span class="line">      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:<span class="number">9092</span>,PLAINTEXT_HOST://localhost:<span class="number">29092</span></span><br><span class="line">      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: <span class="number">1</span></span><br><span class="line">      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: <span class="number">0</span></span><br><span class="line">      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: <span class="number">1</span></span><br><span class="line">      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  ksqldb-server:</span><br><span class="line">    image: confluentinc/ksqldb-server:<span class="number">0.28</span>.<span class="number">3</span></span><br><span class="line">    hostname: ksqldb-server</span><br><span class="line">    container_name: ksqldb-server</span><br><span class="line">    depends_on:</span><br><span class="line">      - broker</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8088:8088&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      KSQL_LISTENERS: http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8088</span></span><br><span class="line">      KSQL_BOOTSTRAP_SERVERS: broker:<span class="number">9092</span></span><br><span class="line">      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: <span class="string">&quot;true&quot;</span></span><br><span class="line">      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: <span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line">  ksqldb-cli:</span><br><span class="line">    image: confluentinc/ksqldb-cli:<span class="number">0.28</span>.<span class="number">3</span></span><br><span class="line">    container_name: ksqldb-cli</span><br><span class="line">    depends_on:</span><br><span class="line">      - broker</span><br><span class="line">      - ksqldb-server</span><br><span class="line">    <span class="keyword">entrypoint</span><span class="language-bash">: /bin/sh</span></span><br><span class="line">    tty: true</span><br></pre></td></tr></table></figure>

<p>启动KsqlDB服务:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<p>使用Docker链接到Cli中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it ksqldb-cli</span><br></pre></td></tr></table></figure>

<p>链接到cli中后，在终端运行命令链接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ksqldb-cli] docker exec -it ksqldb-cli ksql http://ksqldb-server:8088</span><br></pre></td></tr></table></figure>

<p>可以运行命令查看topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show topics;</span><br></pre></td></tr></table></figure>

<p>如果你想链接远端Kafka集群，将<KSQL_BOOTSTRAP_SERVERS> 替换成自己的远程Kafka集群，像下面这个dockerfile一样：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  ksqldb-server-juneyao:</span><br><span class="line">    image: confluentinc/ksqldb-server</span><br><span class="line">    hostname: ksqldb-server-juneyao</span><br><span class="line">    container_name: ksqldb-server-juneyao</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8088:8088&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      KSQL_LISTENERS: http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8088</span></span><br><span class="line">      KSQL_BOOTSTRAP_SERVERS: <span class="number">172.22</span>.<span class="number">17.28</span>:<span class="number">9092</span></span><br><span class="line">      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: <span class="string">&quot;true&quot;</span></span><br><span class="line">      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: <span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line">  ksqldb-cli-juneyao:</span><br><span class="line">    image: confluentinc/ksqldb-cli</span><br><span class="line">    container_name: ksqldb-cli-juneyao</span><br><span class="line">    depends_on:</span><br><span class="line">      - ksqldb-server-juneyao</span><br><span class="line">    <span class="keyword">entrypoint</span><span class="language-bash">: /bin/sh</span></span><br><span class="line">    tty: true</span><br></pre></td></tr></table></figure>

<p> 后面的操作和上面都一样了，启动的时候注意修改名称</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230314162231259.png" alt="image-20230314162231259"></p>
<h3 id="Example-1：-创建流表并查询"><a href="#Example-1：-创建流表并查询" class="headerlink" title="Example 1： 创建流表并查询"></a>Example 1： 创建流表并查询</h3><p>展示有多少Topic:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> topics;</span><br><span class="line"><span class="keyword">show</span> streams;</span><br></pre></td></tr></table></figure>

<p>在cli链接后，我们创建一个riderLocations流，如果locations这个topic在kafka中不存在，则会对应创建。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> STREAM riderLocations (</span><br><span class="line">    profileId <span class="type">VARCHAR</span>,</span><br><span class="line">    latitude  <span class="keyword">DOUBLE</span>,</span><br><span class="line">    longitude <span class="keyword">DOUBLE</span></span><br><span class="line">) <span class="keyword">WITH</span> ( kafka_topic<span class="operator">=</span><span class="string">&#x27;locations&#x27;</span>, value_format<span class="operator">=</span><span class="string">&#x27;json&#x27;</span>, PARTITIONS <span class="operator">=</span><span class="number">1</span> );</span><br></pre></td></tr></table></figure>

<p>然后往topic中插入一批数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-console-producer --broker-list localhost:9092 --topic locations </span><br><span class="line">&#123;&quot;profileId&quot;:&quot;1&quot;,&quot;latitude&quot;:2.0,&quot;longitude&quot;:1.0&#125;</span><br><span class="line">&#123;&quot;profileId&quot;:&quot;2&quot;,&quot;latitude&quot;:3.0,&quot;longitude&quot;:3.0&#125;</span><br><span class="line">&#123;&quot;profileId&quot;:&quot;3&quot;,&quot;latitude&quot;:1.0,&quot;longitude&quot;:1.0&#125;</span><br></pre></td></tr></table></figure>

<p>就可以愉快的查询它了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="string">&#x27;auto.offset.reset&#x27;</span><span class="operator">=</span><span class="string">&#x27;earliest&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> riderLocations;</span><br></pre></td></tr></table></figure>

<p>更多的详细用法可以参考网站<a href="https://ksqldb.io/quickstart.html#quickstart-content">ksqldb</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用反向代理解决SSL认证</title>
    <url>/posts/20230504205542-a6b71998.html</url>
    <content><![CDATA[<p>自己手里有很多私有服务，并且域名还都不一样，例如下面这些：</p>
<table>
<thead>
<tr>
<th>应用</th>
<th>ip</th>
</tr>
</thead>
<tbody><tr>
<td>NAS</td>
<td>192.168.30.5:5000</td>
</tr>
<tr>
<td>Jellyfin</td>
<td>192.168.30.5:8096</td>
</tr>
<tr>
<td>私人笔记</td>
<td>hoey94.github.io</td>
</tr>
<tr>
<td>私人网盘</td>
<td>192.168.30.5:9000</td>
</tr>
<tr>
<td>chatgpt</td>
<td>chat.github.io</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p>这些应用管理起来十分不方便，于是就想将这些网站整合在一起，并且对外提供统一域名访问方式。我自身是有一个免费的顶级域名的hoey.tk，那现在的需求就很明确了，其实就是想得到下面这样的效果：</p>
<table>
<thead>
<tr>
<th>应用</th>
<th>ip</th>
</tr>
</thead>
<tbody><tr>
<td>NAS</td>
<td>nas.hoey.tk</td>
</tr>
<tr>
<td>Jellyfin</td>
<td>jellyfin.hoey.tk</td>
</tr>
<tr>
<td>私人笔记</td>
<td>notes.hoey.tk</td>
</tr>
<tr>
<td>私人网盘</td>
<td>pan.hoey.tk</td>
</tr>
<tr>
<td>chatgpt</td>
<td>chat.hoey.tk</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p>最近找到了一款挺不错的软件<a href="https://github.com/NginxProxyManager/nginx-proxy-manager">Nginx Project Manager</a>，并且还能提供免费的SSL，虽然3个月到期以后还要手动续期，不过白嫖的东西还要什么自行车。它的页面像这样：</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230504205632731.png" alt="image-20230504205632731"></p>
<p>配置完以后，访问的时候只需要使用二级域名访问即可，十分方便，维护起来也十分傻瓜。</p>
<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><ul>
<li>VPS任意，我的是在国外自购的一台服务器，为什么自购国外，大家懂得都懂，现在是科学时代。</li>
<li>自建家用机服务器，我的服务器主要插上8T*2机械硬盘组磁盘阵列，搞成NAS存储服务器做个私有云。另外结合esxi或者是docker能跑很多好玩的东西，这里就不一一列举了，感兴趣的小伙伴可以搜索一下自建NAS服务器 ALL IN ONE。</li>
<li>tk域名是白嫖的，在DNS服务商那里却不被支持（这就是白嫖的代价吧）。自己又穷，买不起域名哈哈哈，就搞了个垃圾域名做中转，4块钱人民币一年哈哈哈。</li>
</ul>
<h2 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h2><p>下面这个是结合自己家庭网络拓扑图和已有的一些服务的网络拓扑图，用这个实现二级域名访问+SSL。</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230504212114306.png" alt="image-20230504212114306"></p>
<p>从最右边开始一层一层解释所做的事情：</p>
<ol>
<li><p>首先联系联通宽带，给到公网IP，将自己内网服务，在软路由内部通过端口映射的方式开放到外网。如果没有公网IP，也可以用frp等工具实现内网穿透。</p>
</li>
<li><p>接下来要解决公网IP变动的问题（联通给的公网IP是动态的，每隔一段时间就会变）。DNS服务商我选择的是Cloudflare，实现DDNS这块是参考开源项目，改写了一个脚本，其主要功能是：以轮训的方式，动态监测公网IP变更，将A记录通过API的方式更新到Cloudflare以实现DNS解析，具体脚本参考<a href="https://github.com/hoey94/cloudflare-api-ddns">cloudflare-api-dns</a>，当然网上也有很多类似以封装好的工具实现DDNS，比如<a href="https://github.com/jeessy2/ddns-go">ddns-go</a></p>
</li>
<li><p>在自己的VPS上搭建好<a href="https://github.com/NginxProxyManager/nginx-proxy-manager">Nginx Project Manager</a>（后面我们简称NPM），用来整合自己所有的服务，并添加SSL认证。</p>
</li>
<li><p>在Cloudflare创建记录将tk域名映射到VPS上，反向代理接受到请求，转发到4块钱买的域名(hoey.asia)上，哈哈哈。</p>
</li>
</ol>
<h2 id="在CentOS-7上-安装-NPM"><a href="#在CentOS-7上-安装-NPM" class="headerlink" title="在CentOS 7上 安装 NPM"></a>在CentOS 7上 安装 NPM</h2><ol>
<li>确保安装了docker 和docker-compose</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker</span></span><br><span class="line">yum remove -y docker   docker-client   docker-client-latest   docker-common   docker-latest   docker-latest-logrotate   docker-logrotate   docker-selinux   docker-engine-selinux   docker-engine</span><br><span class="line">yum install -y yum-utils   device-mapper-persistent-data   lvm2</span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">yum install -y docker-ce</span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">docker -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启ipv6防止日志文件过大 (可选)</span></span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">    &quot;log-opts&quot;: &#123;</span><br><span class="line">        &quot;max-size&quot;: &quot;20m&quot;,</span><br><span class="line">        &quot;max-file&quot;: &quot;3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ipv6&quot;: true,</span><br><span class="line">    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,</span><br><span class="line">    &quot;experimental&quot;:true,</span><br><span class="line">    &quot;ip6tables&quot;:true</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用docker-compose 安装npm</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/docker_data/npm</span><br><span class="line">cd /data/docker_data/npm</span><br><span class="line">vim docker-compose.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将内容粘贴进去 start</span></span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    image: &#x27;jc21/nginx-proxy-manager:latest&#x27;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;80:80&#x27;  # 冒号左边可以改成自己服务器未被占用的端口</span><br><span class="line">      - &#x27;81:81&#x27;  # 冒号左边可以改成自己服务器未被占用的端口</span><br><span class="line">      - &#x27;443:443&#x27; # 冒号左边可以改成自己服务器未被占用的端口</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span><br><span class="line">      - ./letsencrypt:/etc/letsencrypt  # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将内容粘贴进去 end</span> </span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>更新NPM</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line">cp -r /data/docker_data/npm /data/docker_data/npm.archive  # 万事先备份，以防万一</span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    # 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span><br><span class="line"></span><br><span class="line">docker image prune  # prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>卸载NPM</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line">rm -rf /root/data/docker_data/npm  # 完全删除映射到本地的数据</span><br></pre></td></tr></table></figure>



<h2 id="结合Cloudflare-配置NPM"><a href="#结合Cloudflare-配置NPM" class="headerlink" title="结合Cloudflare 配置NPM"></a>结合Cloudflare 配置NPM</h2><p>NPM默认账号密码: <a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#x61;&#x64;&#x6d;&#x69;&#110;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;</a>/changeme，登录后修改</p>
<p>登录Cloudflare，到自己的域名中添加A记录，指向VPS服务器（我的VPS是110.123.11.1，域名是hoey.tk）</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230504222932398.png" alt="image-20230504222932398"></p>
<p>在NPM中添加对应的反向代理配置，并打开SSL，（下图是以nas这条记录为例，描述NPM的配置）</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230504214014283.png" alt="image-20230504214014283"></p>
<p>之后开启SSL认证</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230504214052552.png" alt="image-20230504214052552"></p>
<p>点击保存即可。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>配置完成以后，就可以使用nas.hoey.tk访问nas服务了，当用户访问nas.hoey.tk时，在网络中它的链路应该如下图所示：</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230504214857962.png" alt="image-20230504214857962"></p>
]]></content>
  </entry>
  <entry>
    <title>基于Python的简易FS服务</title>
    <url>/posts/20221212164304-b422eee5.html</url>
    <content><![CDATA[<p>创建start.py，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Python 3</span></span><br><span class="line">    <span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, SimpleHTTPRequestHandler, test <span class="keyword">as</span> test_orig</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span> (*args):</span><br><span class="line">        test_orig(*args, port=<span class="built_in">int</span>(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">8000</span>)</span><br><span class="line"><span class="keyword">except</span> ImportError: <span class="comment"># Python 2</span></span><br><span class="line">    <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer, test</span><br><span class="line">    <span class="keyword">from</span> SimpleHTTPServer <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CORSRequestHandler</span> (<span class="title class_ inherited__">SimpleHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_headers</span> (self):</span><br><span class="line">        self.send_header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        SimpleHTTPRequestHandler.end_headers(self)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test(CORSRequestHandler, HTTPServer)</span><br></pre></td></tr></table></figure>

<p>运行start.py,端口为8000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python start.py 8000</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>拉链表</title>
    <url>/posts/20230221094327-2e5ad32b.html</url>
    <content><![CDATA[<p>拉链表思路图：</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230221094438645.png" alt="image-20230221094438645"></p>
<p>使用HiveSQL增量完成拉链表加工思路：</p>
<p><img src="https://hoey-images.oss-cn-hangzhou.aliyuncs.com/img/image-20230221094348740.png" alt="image-20230221094348740"></p>
]]></content>
  </entry>
</search>
