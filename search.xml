<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac下VIM配置</title>
    <url>/2022/12/08/Mac%E4%B8%8BVIM%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="安装gruvbox主题"><a href="#安装gruvbox主题" class="headerlink" title="安装gruvbox主题"></a>安装gruvbox主题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.vim/colors ; cd ~/.vim/colors</span><br><span class="line">curl -O https://raw.githubusercontent.com/morhetz/gruvbox/blob/master/colors/gruvbox.vim</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim ~/.vimrc</span><br><span class="line">&quot;********************************gruvbox主题******************************&quot;</span><br><span class="line">call plug#begin()</span><br><span class="line">Plug &#x27;morhetz/gruvbox&#x27;</span><br><span class="line">call plug#end()</span><br><span class="line">colorscheme gruvbox</span><br><span class="line">set background=dark</span><br></pre></td></tr></table></figure>

<p>执行完成以后，重新运行vim查看效果。</p>
<h1 id="vimrc其他设置"><a href="#vimrc其他设置" class="headerlink" title="vimrc其他设置"></a>vimrc其他设置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&quot;********************************基本设置******************************&quot;</span><br><span class="line">set tabstop=4                &quot; 设置tab键的宽度</span><br><span class="line">set shiftwidth=4             &quot; 换行时行间交错使用4个空格</span><br><span class="line">set autoindent               &quot; 自动对齐</span><br><span class="line">set backspace=2              &quot; 设置退格键可用</span><br><span class="line">set shiftwidth=4     		 &quot; 自动缩进4空格</span><br><span class="line">set smartindent              &quot; 智能自动缩进</span><br><span class="line">set number                   &quot; 在每一行最前面显示行号</span><br><span class="line">set showmatch                &quot; 高亮显示对应的括号</span><br><span class="line">set mouse=a                  &quot; 启用鼠标</span><br><span class="line">set ruler                    &quot; 在编辑过程中，在右下角显示光标位置的状态行</span><br><span class="line">set cursorline               &quot; 突出显示当前行</span><br><span class="line">set noswapfile               &quot; 设置无交换区文件&quot;</span><br><span class="line">set writebackup              &quot; 设置无备份文件</span><br><span class="line">set nobackup                 &quot; 设置无备份文件</span><br><span class="line">set autochdir                &quot; 设定文件浏览器目录为当前目录</span><br><span class="line">set foldmethod=syntax        &quot; 选择代码折叠类型</span><br><span class="line">set laststatus=2             &quot; 开启状态栏信息</span><br><span class="line">set cmdheight=2              &quot; 命令行的高度，默认为1，这里设为2</span><br><span class="line">set autoread                 &quot; 当文件在外部被修改，自动更新该文件</span><br><span class="line">set autoread                 &quot; 自动检测并加载外部对文件的修改</span><br><span class="line">set autowrite                &quot; 自动检测并加载外部对文件的修改</span><br><span class="line">set showcmd                  &quot; 在状态行显示目前所执行的命令，未完成的指令片段亦会显示出来</span><br><span class="line">syntax enable                &quot; 打开语法高亮</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if has(&quot;gui_running&quot;)</span><br><span class="line">    set guioptions+=b        &quot; 显示底部滚动条</span><br><span class="line">    set nowrap               &quot; 设置不自动换行</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot;********************************设置编码*******************************&quot;</span><br><span class="line">&quot; 设置换行编码</span><br><span class="line">set fileformats=unix,dos,mac</span><br><span class="line">&quot; 设置Vim 内部使用的字符编码方式</span><br><span class="line">set encoding=utf-8</span><br><span class="line">&quot; 设置文件编码</span><br><span class="line">if has(&quot;win32&quot;)</span><br><span class="line">	set fileencoding=chinese</span><br><span class="line">else</span><br><span class="line">	set fileencoding=utf-8</span><br><span class="line">endif</span><br><span class="line">&quot; 解决consle输出乱码</span><br><span class="line">language messages zh_CN.utf-8</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hexo隐藏文章</title>
    <url>/2022/12/12/Hexo%E9%9A%90%E8%97%8F%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在站点根目录下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点目录下的<code>_config.yml</code>中如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo-hide-posts</span></span><br><span class="line">hide_posts:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">可以改成其他你喜欢的名字</span></span><br><span class="line">  filter: hidden</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">留空则默认全部隐藏</span></span><br><span class="line">  public_generators: []</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  noindex: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在文章的属性中定义 <code>hidden: true</code> 即可隐藏文章。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hidden test</span><br><span class="line">date: 2022-12-12 09:49:19</span><br><span class="line">hidden: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>虽然首页上被隐藏了，但你仍然可以通过 <code>https://hexo.test/lorem-ipsum/</code> 链接访问它。</p>
<p>你可以在命令行运行 <code>hexo hidden:list</code> 来获取当前所有的已隐藏文章列表。</p>
<p>参考blog：<a href="https://www.cnblogs.com/yangstar/articles/16690342.html">https://www.cnblogs.com/yangstar/articles/16690342.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Mac自动SSH+MFA</title>
    <url>/2022/12/08/Mac%E8%87%AA%E5%8A%A8SSH-MFA/</url>
    <content><![CDATA[<p>因工作需要，使用Iterm2自动跳转远程终端，提高工作效率</p>
<h1 id="自动获取MFA-Token"><a href="#自动获取MFA-Token" class="headerlink" title="自动获取MFA Token"></a>自动获取MFA Token</h1><p>安装oath-toolkit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew search oath-toolkit</span><br><span class="line">brew install oath-toolkit</span><br></pre></td></tr></table></figure>

<p>使用下面命令获取token， 注：${SECKEY} 是一个变量，按照自己的填写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> smCode=<span class="string">&quot;echo `oathtool --totp -b <span class="variable">$&#123;SECKEY&#125;</span> `| pbcopy&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="自定义SHELL-MFA-TOKEN脚本"><a href="#自定义SHELL-MFA-TOKEN脚本" class="headerlink" title="自定义SHELL+MFA TOKEN脚本"></a>自定义SHELL+MFA TOKEN脚本</h1><p>将脚本保存juneyao_auto_ssh_prd.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">opts=$@</span><br><span class="line">getParam()&#123;</span><br><span class="line">  arg=$1</span><br><span class="line">  echo $opts | xargs -n1 | cut -b 2- | awk -F&#x27;=&#x27; &#x27;&#123;if($1==&quot;&#x27;&quot;$arg&quot;&#x27;&quot;) print $2&#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USER=zhaoyihao</span><br><span class="line">echo &quot;[INFO] USER: &quot;$&#123;USER&#125;</span><br><span class="line"></span><br><span class="line">HOST=`getParam HOST`</span><br><span class="line">echo &quot;[INFO] HOST: &quot;$&#123;HOST&#125;</span><br><span class="line"></span><br><span class="line">PASSWORD=`getParam PASSWORD`</span><br><span class="line">echo &quot;[INFO] PASSWORD: *****&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stg:20 prd:2222</span></span><br><span class="line">PORT=`getParam PORT`</span><br><span class="line">echo &quot;[INFO] PORT: &quot;$&#123;PORT&#125;</span><br><span class="line"></span><br><span class="line">PRD_TOKEN=&quot;`oathtool --totp -b 4YIKKGPXJD3G32YP`&quot;</span><br><span class="line"></span><br><span class="line">sw_login()&#123;</span><br><span class="line">        expect -c &quot;</span><br><span class="line">        # 每个判断等待1秒</span><br><span class="line">        set timeout 1</span><br><span class="line">        spawn ssh $USER@$HOST -p $PORT</span><br><span class="line">        # 判断是否需要保存秘钥</span><br><span class="line">        expect &#123;</span><br><span class="line">                \&quot;yes/no\&quot;   &#123; send yes\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 判断发送密码</span><br><span class="line">        expect &#123;        </span><br><span class="line">        				\&quot;*assword\&quot; &#123; send $PASSWORD\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 判断发送验证码</span><br><span class="line">        expect &#123;        </span><br><span class="line">        				\&quot;*OTP Code*\&quot; &#123; send $PRD_TOKEN\n &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 停留在当前登录界面</span><br><span class="line">        interact</span><br><span class="line">        &quot;</span><br><span class="line">&#125;</span><br><span class="line">sw_login</span><br></pre></td></tr></table></figure>



<p>脚本的使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh juneyao_auto_ssh_prd.sh -HOST=jmp.juneyaoair.com -PORT=2222 -PASSWORD=123123</span><br></pre></td></tr></table></figure>



<h1 id="与ITerm2集成"><a href="#与ITerm2集成" class="headerlink" title="与ITerm2集成"></a>与ITerm2集成</h1><p>在ITerm2终端中进行配置</p>
<p>Preference… -&gt; Profiles -&gt; +<img src="http://tva1.sinaimg.cn/large/0066vfZIgy1h8woxb34vqj31y01dwe81.jpg" alt="image.png"></p>
<p>将脚本运行命令填入到Send text at start:文本框中保存即可。</p>
]]></content>
  </entry>
  <entry>
    <title>V2ray搭建</title>
    <url>/2022/12/13/V2ray%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ol>
<li>登录vps</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CentOS：</span></span><br><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>



<p>2.在出现的菜单选择界面，输入数字1回车，开始安装。</p>
<p><img src="http://tva1.sinaimg.cn/large/0066vfZIgy1h92en36veej30vy0bwn1g.jpg" alt="image.png"></p>
<p>3.下面会让你选择V2ray的传输协议，可选协议众多，如果没什么特殊需求的话，默认TCP即可。如果你需要启用类似KCPTUN的网络加速功能，则选择mKCP开头的几个，在mKCP协议下，流量以UDP的形式传输。</p>
<p><img src="http://tva1.sinaimg.cn/large/0066vfZIgy1h92eo080wmj311o0xck91.jpg" alt="image.png"></p>
<p>4.接下来分别需要选择：</p>
<p>V2ray端口：默认会给出一个端口，回车接受即可，或者也可以自定义。</p>
<p>广告拦截：一般不需要开启，大家可能更习惯浏览器自带的广告拦截。</p>
<p>是否配置Shadowsocks：如果需要同时安装Shadowsocks的话，选Y回车。建议安装，因为在V2ray出现无法连接的情况下，可以连接Shadowsocks用来判断是否服务器问题。</p>
<p><img src="http://tva1.sinaimg.cn/large/0066vfZIgy1h92eoswmgmj30oq0io0yr.jpg" alt="image.png"></p>
<p>5.如果选择安装Shadowsocks，那么会依次要求设置端口、密码、加密协议，按提示设置即可。设置完成后回车键继续：</p>
<p><img src="http://tva1.sinaimg.cn/large/0066vfZIgy1h92epgcv0pj30t811sk5u.jpg" alt="image.png"></p>
<p>6.接下来会提示配置完成，可以开始安装，这时按回车键继续：</p>
<p><img src="http://tva1.sinaimg.cn/large/0066vfZIgy1h92epx1rgrj30mg0hw7al.jpg" alt="image.png"></p>
<p>7.安装完成后，会出现下图界面，提示刚才的各项配置信息，可以截图保存，以备后续客户端连接使用：提示：各项参数可以鼠标选择，选择成功后即自动复制。</p>
<p><img src="http://tva1.sinaimg.cn/large/0066vfZIgy1h92eqng8t9j311o0viaod.jpg" alt="image.png"></p>
<p>8.现在可以使用V2ray客户端连接服务器了，连接成功后，就可以开始科学上网啦。</p>
<h1 id="V2Ray-Mac客户端"><a href="#V2Ray-Mac客户端" class="headerlink" title="V2Ray Mac客户端"></a>V2Ray Mac客户端</h1><p>V2RayU 下载地址：<a href="https://github.com/yanue/V2rayU/releases">https://github.com/yanue/V2rayU/releases</a></p>
<h1 id="V2Ray-IOS客户端"><a href="#V2Ray-IOS客户端" class="headerlink" title="V2Ray IOS客户端"></a>V2Ray IOS客户端</h1><p>V2Ray IOS客户端有 Shadowrocket（小火箭）、Kitsunebi、Pepi 三款APP，但是目前均已从国区商店下架。可以网上搜一下有很多教程。可以给一个参考<a href="https://www.wangchao.info/1982.html">https://www.wangchao.info/1982.html</a></p>
<h1 id="V2Ray-安卓客户端"><a href="#V2Ray-安卓客户端" class="headerlink" title="V2Ray 安卓客户端"></a>V2Ray 安卓客户端</h1><p><a href="https://github.com/2dust/v2rayNG/releases/">https://github.com/2dust/v2rayNG/releases/</a></p>
]]></content>
  </entry>
  <entry>
    <title>github配置多用户</title>
    <url>/2022/12/08/github%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<p>因为需要使用多个github账号，但只有一台电脑，想要动态切换不同用户，并且做到免密提交。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Mac book Pro 2020</li>
<li>git version 2.24.3 (Apple Git-128)</li>
<li>github账号</li>
</ul>
<table>
<thead>
<tr>
<th>github登录账号</th>
<th>github用户名</th>
</tr>
</thead>
<tbody><tr>
<td><a href="mailto:&#x63;&#110;&#110;&#113;&#106;&#98;&#x61;&#x6e;&#53;&#50;&#x31;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x63;&#110;&#110;&#113;&#106;&#98;&#x61;&#x6e;&#53;&#50;&#x31;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></td>
<td>hoey94</td>
</tr>
<tr>
<td><a href="mailto:&#x33;&#53;&#49;&#x38;&#x36;&#x35;&#x35;&#x37;&#x36;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x33;&#53;&#49;&#x38;&#x36;&#x35;&#x35;&#x37;&#x36;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></td>
<td>hoey1994</td>
</tr>
</tbody></table>
<ul>
<li>测试用的项目(大小写区分)</li>
</ul>
<table>
<thead>
<tr>
<th>Github账号</th>
<th>项目</th>
</tr>
</thead>
<tbody><tr>
<td><a href="mailto:&#99;&#x6e;&#110;&#x71;&#x6a;&#x62;&#97;&#x6e;&#x35;&#50;&#49;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#99;&#x6e;&#110;&#x71;&#x6a;&#x62;&#97;&#x6e;&#x35;&#50;&#49;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></td>
<td>Test</td>
</tr>
<tr>
<td><a href="mailto:&#x33;&#x35;&#49;&#56;&#54;&#x35;&#x35;&#x37;&#54;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x33;&#x35;&#49;&#56;&#54;&#x35;&#x35;&#x37;&#54;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a></td>
<td>test</td>
</tr>
</tbody></table>
<h1 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h1><p>为两个账号生成不同的公钥(*.pub)和密钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;cnnqjban521@gmail.com&quot; -f ~/.ssh/id_rsa_hoey94</span><br><span class="line">ssh-keygen -t rsa -C &quot;351865576@qq.com&quot; -f ~/.ssh/id_rsa_hoey1994</span><br></pre></td></tr></table></figure>

<p>生成的两组，公钥和密钥，分别到github官网上配置免密登录 Settings-&gt;SSH and GPG Keys-&gt;New SSH Key，填写的内容可以是用下面命令查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa_hoey94.pub</span><br><span class="line">cat ~/.ssh/id_rsa_hoey1994.pub</span><br></pre></td></tr></table></figure>



<h1 id="配置映射"><a href="#配置映射" class="headerlink" title="配置映射"></a>配置映射</h1><p>创建~/.ssh/config，将内容填入进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host github-hoey1994</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_hoey1994</span><br></pre></td></tr></table></figure>



<p>这里解释一下这一组内容的含义，平常克隆的时候我们会这么写:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:hoey1994/test.git</span><br></pre></td></tr></table></figure>

<p>但如果如果按照上面内容进行配置以后，在克隆的时候要改成这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github-hoey1994:hoey1994/test.git</span><br></pre></td></tr></table></figure>

<p>请仔细对比一下上面两个克隆命令之间的差异</p>
<p>按照同样原理，将另一个账号也配置一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host github-hoey94</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_hoey94</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果端口有修改，可以按照下面的方式进行填写</p>
<p>Host gitlib-juneyao<br>HostName gitlab.juneyaoair.com<br>Port 10022<br>IdentityFile /Users/hoey/.ssh/id_rsa_juneyao</p>
</blockquote>
<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>推荐不要跳过这一步，gacm是管理git用户很不错的一个工具，可以稍微熟悉一下命令。对于commit 的author的信息，可以快速的进行切换，因为本地有多个用户，使用它可以大大提高效率。</p>
<ol>
<li>取消全局的用户配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --unset user.email</span><br><span class="line">git config --global --unset user.mail</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看内容是否已经取消</span></span><br><span class="line">git config --global -e</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>安装多用户管理工具<a href="https://github.com/hoey94/gacm">gacm</a>，具体安装步骤见github</p>
</li>
<li><p>使用gacm命令添加两个账户</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gacm add --name hoey94 --email cnnqjban521@gmail.com</span><br><span class="line">gacm add --name hoey1994 --email 351865576@qq.com</span><br></pre></td></tr></table></figure>



<h1 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h1><p>在账号<a href="mailto:&#99;&#110;&#x6e;&#x71;&#x6a;&#x62;&#97;&#x6e;&#x35;&#x32;&#x31;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#99;&#110;&#x6e;&#x71;&#x6a;&#x62;&#97;&#x6e;&#x35;&#x32;&#x31;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a>(hoey94)下创建Test项目</p>
<p>在账号<a href="mailto:&#51;&#53;&#49;&#x38;&#x36;&#x35;&#53;&#55;&#54;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;">&#51;&#53;&#49;&#x38;&#x36;&#x35;&#53;&#55;&#54;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;</a>(hoey1994)下创建test项目</p>
<p>使用下面命令分别克隆到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆Test</span></span><br><span class="line">git clone git@github-hoey94:hoey94/Test.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用gacm切换项目本地用户为hoey94</span></span><br><span class="line">gacm use hoey94 --local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看项目本地用户是否切换成功</span></span><br><span class="line">gacm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆<span class="built_in">test</span></span></span><br><span class="line">git clone git@github-hoey1994:hoey1994/test.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用gacm切换项目本地用户为hoey1994</span></span><br><span class="line">gacm use hoey1994 --local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看项目本地用户是否切换成功</span></span><br><span class="line">gacm ls</span><br></pre></td></tr></table></figure>



<p>改动一下里面的内容并提交完成测试。</p>
]]></content>
  </entry>
  <entry>
    <title>hexo换主题乱码问题的解决</title>
    <url>/2022/12/08/hexo%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>使用next主题时运行报错</p>
<h2 id="问题的表现"><a href="#问题的表现" class="headerlink" title="问题的表现"></a>问题的表现</h2><p><code>&#123;% extends '_layout.swig' %&#125; &#123;% import '_macro/post.swig' as post_template %&#125;....................</code></p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<p>之后重新</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean          </span><br><span class="line">hexo <span class="keyword">generate</span>      </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>基于Python的简易FS服务</title>
    <url>/2022/12/12/%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E7%AE%80%E6%98%93FS%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>创建start.py，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Python 3</span></span><br><span class="line">    <span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, SimpleHTTPRequestHandler, test <span class="keyword">as</span> test_orig</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span> (*args):</span><br><span class="line">        test_orig(*args, port=<span class="built_in">int</span>(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">8000</span>)</span><br><span class="line"><span class="keyword">except</span> ImportError: <span class="comment"># Python 2</span></span><br><span class="line">    <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer, test</span><br><span class="line">    <span class="keyword">from</span> SimpleHTTPServer <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CORSRequestHandler</span> (<span class="title class_ inherited__">SimpleHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_headers</span> (self):</span><br><span class="line">        self.send_header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        SimpleHTTPRequestHandler.end_headers(self)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test(CORSRequestHandler, HTTPServer)</span><br></pre></td></tr></table></figure>

<p>运行start.py,端口为8000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python start.py 8000</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
